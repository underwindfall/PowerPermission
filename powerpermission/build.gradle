apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "de.mannodermaus.android-junit5"
apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"

android {
    compileSdkVersion androidCompileSdkVersion

    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode androidVersionCode
        versionName androidVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }

    testOptions {
        junitPlatform {
            filters {
                engines {
                    include 'spek2'
                }
            }
            jacocoOptions {
                // here goes all jacoco config, for example
                html.enabled = true
                xml.enabled = false
                csv.enabled = false
            }
        }
        unitTests.all {
            testLogging.events = ["passed", "skipped", "failed"]
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation kotlinStdlib
    implementation kotlinReflect
    implementation androidXAppCompat
    compileOnly androidXAnnotations
    // spek
    testImplementation assertJCore
    testImplementation mockK
    testImplementation spekDslJvm
    testImplementation spekDslRunner
}


// Avoid Kotlin docs error
tasks.withType(Javadoc) {
    enabled = false
}

// Remove javadoc related tasks
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId = groupProjectID
                artifactId = "powerpermission"
                version = publishVersionID
                pom {
                    name = libName
                    description = descriptionLib
                    url = websiteLib
                    developers {
                        developer {
                            id = userId
                            name = userName
                        }
                    }
                    scm {
                        connection = gitUrl
                        developerConnection = gitUrl
                        url = websiteLib
                    }
                }
            }
        }
    }
}

bintray {
    user = System.getenv("bintrayUser")
    key = System.getenv("bintrayApiKey")

    configurations = ['archives']
    pkg {
        repo = "PowerPermission"
        name = libName
        websiteUrl = websiteLib
        vcsUrl = gitUrl
        licenses = ['Apache-2.0']
        publish = true
    }
}