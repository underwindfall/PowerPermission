apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "de.mannodermaus.android-junit5"
apply plugin: "maven-publish"

android {
    compileSdkVersion androidCompileSdkVersion

    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode androidVersionCode
        versionName androidVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }

    testOptions {
        junitPlatform {
            filters {
                engines {
                    include 'spek2'
                }
            }
            jacocoOptions {
                // here goes all jacoco config, for example
                html.enabled = true
                xml.enabled = false
                csv.enabled = false
            }
        }
        unitTests.all {
            testLogging.events = ["passed", "skipped", "failed"]
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation kotlinStdlib
    implementation kotlinReflect
    implementation androidXAppCompat
    compileOnly androidXAnnotations
    // spek
    testImplementation assertJCore
    testImplementation mockK
    testImplementation spekDslJvm
    testImplementation spekDslRunner
}

//publish {
//    def artifactProjectID = "powerpermission"
//
//    userOrg = userName
//    repoName = libName
//    groupId = groupProjectID
//    artifactId = artifactProjectID
//    publishVersion = publishVersionID
//    desc = descriptionLib
//    website = websiteLib
//}

// Because the components are created only during the afterEvaluate phase, you must
// configure your publications using the afterEvaluate() lifecycle method.
afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // You can then customize attributes of the publication as shown below.
                groupId = groupProjectID
                artifactId = "powerpermission"
                version = publishVersionID
            }
            // Creates a Maven publication called “debug”.
            debug(MavenPublication) {
                // Applies the component for the debug build variant.
                from components.debug

                groupId = groupProjectID
                artifactId = "powerpermission"
                version = publishVersionID
            }
        }
    }
}

//afterEvaluate {
//    publishing {
//        publications {
//            release(MavenPublication) {
//                groupId = 'com.marandaneto'
//                artifactId = 'publish-mylib'
//                version = '1.0'
//
//                artifact androidSourcesJar
//                artifact androidJavadocsJar
//
//                pom {
//                    name = 'com.marandaneto:publish-mylib'
//                    description = 'my lib'
//                    url = 'www.marandaneto.com'
//                    licenses {
//                        license {
//                            name = 'The Apache License, Version 2.0'
//                            url = 'www.apache.org/licenses/LICENSE-2.0.txt'
//                        }
//                    }
//                    developers {
//                        developer {
//                            id = 'marandaneto'
//                            name = 'Manoel Neto'
//                            email = 'me@marandaneto.com' // its fake :)
//                        }
//                    }
//                    scm {
//                        connection = 'scm:git:git://github.com/marandaneto/publishit.git'
//                        developerConnection = 'scm:git:ssh://github.com/marandaneto/publishit.git'
//                        url = 'www.github.com/marandaneto/publishit'
//                    }
//                }
//
//                from components.release
//            }
//        }
//        repositories {
//            maven {
//                def releasesRepoUrl = "$buildDir/repos/releases"
//                def snapshotsRepoUrl = "$buildDir/repos/snapshots"
//                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
//            }
//        }
//    }
//}